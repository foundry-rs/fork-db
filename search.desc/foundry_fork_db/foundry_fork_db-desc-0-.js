searchState.loadedDescShard("foundry_fork_db", 0, "foundry-fork-db\nSmart caching and deduplication of requests when using a …\nCache related abstraction\nHandles an internal provider and listens for requests.\nThe Request type the Backend listens for\nFetch the account info\nthe mode blocks the current task\nFetch a block hash\nthe mode use <code>tokio::task::block_in_place()</code> to block in …\nmode for the <code>SharedBackend</code> to block or not block when …\nFetch an entire block with transactions\nLogged when an error is indicative that the user is trying …\nRequest variants that are executed by the provider\nSets the pinned block to fetch data from\nA cloneable backend type that shares access to the backend …\nFetch a storage slot\nFetch a transaction\nUpdate Address data\nUpdate Block Hashes\nUpdate Storage data\nListeners that wait for a <code>get_account</code> related response\nReturns the DB accounts\nReturns the DB accounts length\nchannel used for sending commands related to database …\nReturns the DB block_hashes\nReturns the DB block_hashes length\nThe block to fetch data from.\nListeners that wait for a <code>get_block</code> response\nThe mode for the <code>SharedBackend</code> to block in place or not\nEnsures that the underlying cache gets flushed once the …\nReturns the DB\nStores all the data.\nFlushes the DB to disk if caching is enabled\nFlushes the DB to a specific file\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nreturns the future that fetches the account data\nReturns the full block for the given block identifier\nReturns the transaction for the hash\nIncoming commands.\nInserts or updates data for multiple addresses\nInserts or updates data for multiple block hashes\nInserts or updates data for multiple storage slots\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new <code>SharedBackend</code> and the <code>BackendHandler</code>\nhandle the request in queue in the future.\nRequests currently in progress\nunprocessed queued requests\nprocess a request for an account\nprocess a request for account’s storage\nprocess a request for an entire block\nprocess a request for a block hash\nprocess a request for a transactions\nrun process logic with the blocking mode\nUpdates the pinned block to fetch data from\n<em>Spawns</em> a new <code>BackendHandler</code> on a <code>tokio::task</code> that listens …\nSame as <code>Self::spawn_backend</code> but spawns the <code>BackendHandler</code> …\nReturns the DB storage\nReturns the DB storage length\nListeners that wait for a <code>get_storage_at</code> response\nReturns a new <code>SharedBackend</code> and the <code>BackendHandler</code> with a …\nA shareable Block database\nrelevant identifying markers in the context of BlockchainDb\nA type that flushes a <code>JsonBlockCacheDB</code> on drop\nA DB that stores the cached content in a json file\nThe Data the JsonBlockCacheDB can read and flush\nIn Memory cache containing all fetched accounts and …\nReturns the map that holds the account related info\nAccount related data\nReturns the map that holds all the block hashes\nAll retrieved block hashes\nReturns the inner cache\nthe cache that can be flushed\nWhere this cache file is stored.\nClears all data stored in this db\nObject that’s stored in a json file\nReturns the underlying storage\nReturns the MemDb it holds access to\nContains all the data\nThe implementation of DatabaseCommit::commit()\nFlushes the DB to disk if caching is enabled.\nFlushes the DB to a specific file\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nall the hosts used to connect to\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this is a transient cache and nothing will …\nLoads the contents of the diskmap file and returns the …\nReturns the Env related metadata\nMetadata stored alongside the data\nmetadata of the current config\nCreates a new instance of the BlockchainDb.\nCreates a new instance\nCreates a new instance.\nCreates a new instance of the BlockchainDb and skips check …\nReturns the map that holds the storage related info\nStorage related data\nErrors that can happen when working with <code>revm::Database</code>\nResult alias with <code>DatabaseError</code> as error\nContains the error value\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhether the error is potentially caused by the user …")